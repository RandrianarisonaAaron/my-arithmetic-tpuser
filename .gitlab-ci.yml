# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: python:3.8

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

before_script:
- apt-get update && apt-get upgrade -y
- apt install python3-pip -y
- pip install poetry
- poetry lock --no-update
- poetry install
- pip3 install tox
- pip install poetry-dynamic-versioning



tox-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - test
  script:
    - tox

coverage-tests-job:
  stage: test
  tags:
    - test
  script:
    - pip install pytest pytest-cov
    - pytest --cov --cov-report term --cov-report xml:coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

release_job:
  stage: deploy
  tags:
    - test
  rules:
    - if: $CI_COMMIT_TAG              
  script:
    - echo "my-arithmetic-$USER deployment on stable servers"
    - poetry install
    - poetry build
    - ls dist/

develop_job:
  stage: build
  tags:
    - test
  rules:
    - if: ($CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop")
  script:
    - echo "my-arithmetic-$USER deployment on stable servers"
    - poetry install
    - poetry build
    - ls dist/

sync-with-github:
  tags:
    - test
  before_script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
  script:
    - git remote -v | grep -w github || git remote add github $REMOTE_REPOSITORY_URL
    - git remote set-url github $REMOTE_REPOSITORY_URL
    - git checkout main
    - git pull https://RandrianarisonaAaron:LitPopol+009!@github.com/RandrianarisonaAaron/my-arithmetic-tpuser.git main
    - git pull github main
    - git status
    - git push https://root:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:main
